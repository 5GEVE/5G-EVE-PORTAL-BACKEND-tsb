swagger: "2.0"
info:
  description: "Ticketing system module for 5G-EVE portal"
  version: "0.0.1"
  title: "5G-EVE TSM module"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "gigarcia@it.uc3m.es"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "www.5g-eve.eu"
basePath: "/portal/tsb"
schemes:
- "https"
- "http"
paths:
  /products:
    get:
      tags:
      - "Products"
      summary: "Finds available products that are susceptible for ticket association"
      description: ""
      operationId: "getProducts"
      produces:
      - "application/json"
      responses:
        401:
          description: "Unauthorized"
        200:
          description: ""
      security:
        - api_key: []  
        
  /components:
    get:
      tags:
      - "Components"
      summary: "Finds available components that are susceptible for ticket association"
      description: ""
      operationId: "getComponents"
      produces:
      - "application/json"
      responses:
        401:
          description: "Unauthorized"
        200:
          description: ""
      security:
        - api_key: [] 
        
  /adminusers:
    get:
      tags:
      - "Site admin users"
      summary: "Finds admin users to whom we can assign tickets"
      description: ""
      operationId: "getAdminUsers"
      produces:
      - "application/json"
      responses:
        401:
          description: "Unauthorized"
        200:
          description: ""
      security:
        - api_key: []  

  /tickets:
    post:
      tags:
      - "Tickets"
      summary: "Add a new ticket"
      description: ""
      operationId: "addTicket"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New ticket to be created"
        required: true
        schema:
          $ref: "#/definitions/newTicket"
      responses:
        400:
          description: "Bad request due to missing parameters"
        401:
          description: "Unauthorized"
        200:
          description: "Id of the newly created ticket"
      security:
        - api_key: []
    get:
      tags:
      - "Tickets"
      summary: "Finds tickets assotiated to a specific user"
      description: ""
      operationId: "getTickets"
      produces:
      - "application/json"
      responses:
        401:
          description: "Unauthorized"
        200:
          description: ""
      security:
        - api_key: []

  /tickets/trusted:
    post:
      tags:
      - "Tickets"
      summary: "Add a new ticket from a trusted service"
      description: ""
      operationId: "addTrustedTicket"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New ticket to be created"
        required: true
        schema:
          $ref: "#/definitions/newTrustedTicket"
      responses:
        400:
          description: "Bad request due to missing parameters"
        401:
          description: "Unauthorized"
        200:
          description: "ID of the newly created ticket"

  /tickets/{ticket_id}:
    get:
      tags:
      - "Tickets"
      summary: "Retrieve a specific ticket"
      produces:
      - "application/json"
      parameters:
        - in: path
          name: ticket_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Ticket ID
      responses:
        401:
          description: "Unauthorized"
        200:
          description: ""
      security:
        - api_key: []

  /tickets/{ticket_id}/comments:
    get:
      tags:
      - "Comments"
      summary: "Retrieve comments of a ticket"
      produces:
      - "application/json"
      parameters:
        - in: path
          name: ticket_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Ticket ID
      responses:
        401:
          description: "Unauthorized"
        200:
          description: "Comments assotiated to a ticket"
      security:
        - api_key: []
    post:
      tags:
      - "Comments"
      summary: "Creates a new comment for a ticket"
      consumes:
      - "application/json"            
      produces:
      - "application/json" 
      parameters:
      - in: path
        name: ticket_id
        required: true
        type: integer
        minimum: 1
        description: The Ticket ID      
      - in: "body"
        name: "body"
        description: "New comment to be created"
        required: true
        schema:
          $ref: "#/definitions/newComment"
      responses:
        400:
          description: "Bad request due to missing parameters"
        401:
          description: "Unauthorized"
        200:
          description: "Id of the newly created comment"
        
      security:
        - api_key: []
  /tickets/{ticket_id}/comments/trusted:
    post:
      tags:
      - "Comments"
      summary: "Creates a new comment for a ticket from a trusted service"
      consumes:
      - "application/json"            
      produces:
      - "application/json" 
      parameters:
      - in: path
        name: ticket_id
        required: true
        type: integer
        minimum: 1
        description: The Ticket ID      
      - in: "body"
        name: "body"
        description: "New comment to be created"
        required: true
        schema:
          $ref: "#/definitions/newTrustedComment"
      responses:
        400:
          description: "Bad request due to missing parameters"
        401:
          description: "Unauthorized"
        200:
          description: "Id of the newly created comment"                

securityDefinitions:
  api_key:
    type: "apiKey"
    name: "Bearer"
    in: "header"
definitions:
  newTicket:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      product:
        type: "string"
        description: "Name of the product where the ticket will be placed"
      component:
        type: string
        description: "Name of the component where the ticket will be placed"
      summary:
        type: string
      description:
        type: string
      assigned_to:
        type: string

  newTrustedTicket:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      reporter:
        type: "string"
        description: "email of the user creating the ticket"
      product:
        type: "string"
        description: "Name of the product where the ticket will be placed"
      component:
        type: string
        description: "Name of the component where the ticket will be placed"
      summary:
        type: string
      description:
        type: string
      assigned_to:
        type: string        
  newComment:
    type: "object"
    properties:
      comment:
        type: "string"
        description: "Comment to be added"
  newTrustedComment:
    type: "object"
    properties:
      reporter:
        type: "string"
        description: "email of the user creating the ticket"    
      comment:
        type: "string"
        description: "Comment to be added"        